<?php

namespace frontend\controllers;

use backend\models\Articles;
use backend\models\Completed;
use backend\models\KnowledgeBase;
use backend\models\Reviews;
use backend\models\Services;
use backend\models\Stages;
use backend\models\Tariff;
use backend\models\User;
use backend\models\UserModel;
use backend\models\UserPayments;
use backend\models\UserStages;
use common\RequestSMS\SMS;
use frontend\models\Bitrix;
use frontend\models\CRest;
use frontend\models\ResendVerificationEmailForm;
use frontend\models\VerifyEmailForm;
use GuzzleHttp\Exception\GuzzleException;
use phpDocumentor\Reflection\Location;
use Yii;
use yii\base\InvalidArgumentException;
use yii\data\Pagination;
use yii\helpers\Html;
use yii\helpers\Url;
use yii\web\BadRequestHttpException;
use yii\web\Controller;
use yii\filters\VerbFilter;
use yii\filters\AccessControl;
use common\models\LoginForm;
use frontend\models\PasswordResetRequestForm;
use frontend\models\ResetPasswordForm;
use frontend\models\SignupForm;
use frontend\models\ContactForm;
use yii\web\Cookie;
use yii\web\Request;
use yii\web\Response;
use function Symfony\Component\String\u;

/**
 * Site controller
 */
class SiteController extends Controller
{
    /**
     * {@inheritdoc}
     */
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'only' => ['logout', 'signup'],
                'rules' => [
                    [
                        'actions' => ['signup'],
                        'allow' => true,
                        'roles' => ['?'],
                    ],
                    [
                        'actions' => ['logout'],
                        'allow' => true,
                        'roles' => ['@'],
                    ],
                ],
            ],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ],
            'captcha' => [
                'class' => 'yii\captcha\CaptchaAction',
                'fixedVerifyCode' => YII_ENV_TEST ? 'testme' : null,
            ],
        ];
    }


    public function beforeAction($action)
    {
        $arr = ['bitrix-app', 'bitrix-app-install', 'get-new-payments', 'confirm-payment'];
        if (in_array($action->id, $arr)) {
            $this->enableCsrfValidation = false;
        }
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }


    public function actionCheckPhone()
    {
        Yii::$app->response->format = Response::FORMAT_JSON;
        if (!empty($_POST['phone'])) {
            if (empty($_SESSION['exp_date_sms']) || time() > $_SESSION['exp_date_sms']) {
                $phone = preg_replace('/[^\d]+/', '', Html::encode($_POST['phone']));
                $phone[0] = 7;
                $user = UserModel::findOne(['username' => $phone]);
                return ['exist' => !empty($user)];
            } else return ['status' => 'error', 'message' => 'Не более 1 смс в 2 минуты'];
        } else return ['status' => 'error', 'message' => 'Не верно указан телефон!'];
    }

    public function actionSendSms()
    {
        Yii::$app->response->format = Response::FORMAT_JSON;
        $session = Yii::$app->session;
        if (!$session->isActive) {
            $session->open();
        }
        if (!empty($_POST['phone'])) {
            if (empty($_SESSION['exp_date_sms']) || time() > $_SESSION['exp_date_sms']) {
                $phone = preg_replace('/[^\d]+/', '', Html::encode($_POST['phone']));
                $code_send = $this->random_number();
                //$client = new \SoapClient('https://smsc.ru/sys/soap.php?wsdl');
                //$ret = $client->send_sms(array('login' => 'pravozashitnik', 'psw' => 'pASSusp777', 'phones' => $phone, 'mes' => $code_send, 'sender' => 'Юристы ПЗ'));
                (new SMS())->request('sms/send', [
                    "api_id" => "D4ABE784-9672-EF97-9AA2-C540BE6264E3",
                    "to" => "$phone", // До 100 штук до раз
                    "msg" => "Экспресс Банкрот. Ваш код для авторизации: $code_send",
                    "json" => 1
                ]);
                $response =
                $_SESSION['sms-code'] = $code_send;
                $_SESSION['exp_date_sms'] = time() + 120;
                return ['status' => 'success', 'message' => 1];
            } else return ['status' => 'error', 'message' => 'Не более 1 СМС в 2 минуты!'];
        } else return ['status' => 'error', 'message' => 'Не указан номер телефона!'];
    }

    public function actionCodeConfirm()
    {
        Yii::$app->response->format = Response::FORMAT_JSON;
        if (!empty($_POST['code'])) {
            $code = $_POST['code'];
            $code_session = $_SESSION['sms-code'];
            if ($code == $code_session) {
                return ['status' => 'success'];
            } else {
                return ['status' => 'error', 'message' => 'Код не совпадает', session_id()];
            }
        } else return ['status' => 'error', 'message' => 'Не верно указан код!'];
    }

    private function random_number($length = 6)
    {
        $arr = array(
            '1', '2', '3', '4', '5', '6', '7', '8', '9', '0'
        );

        $res = '';
        for ($i = 0; $i < $length; $i++) {
            $res .= $arr[random_int(0, count($arr) - 1)];
        }
        return $res;
    }

    public function actionConfirmSignup()
    {
        Yii::$app->response->format = Response::FORMAT_JSON;
        if (!empty($_POST)) {
            $post = $_POST;
            if (!empty($post['fio']) && !empty($post['username']) && !empty($post['region']) && !empty($post['password']) && !empty($post['confirm_pass'])) {
                $phone = preg_replace('/[^\d]+/', '', Html::encode($_POST['username']));
                $phone[0] = 7;
                $users = User::find()->asArray()->where(['email' => $_POST['email']])->one();
                if (empty($users)){
                    if ($post['password'] === $post['confirm_pass']) {
                        if (strlen($post['password']) >= 8) {
                            $model = new \common\models\User();
                            $model->username = $phone;
                            $model->deal_id = 0;
                            $model->email = !empty($post['email']) ? $_POST['email'] : "Почта пользователя {$phone} не указана";
                            $model->region = $post['region'];
                            $model->fio = $post['fio'];
                            $model->setPassword($post['password']);
                            $model->generateAuthKey();
                            $model->generateEmailVerificationToken();
                            $_SESSION['phone'] = $phone;
                            $_SESSION['password'] = $_POST['password'];
                            $_SESSION['valid_user'] = true;
                            if ($model->validate()) {
                                if ($model->save()) {
                                    $dataFile = Bitrix::new__contact__signup($model->fio, $model->username);
                                    if (is_string($dataFile))
                                        @file_put_contents('test_bitrix.log', $dataFile . PHP_EOL, FILE_APPEND);
                                    $userMod = User::findOne(['username' => $phone]);
                                    $userMod->contact_id = !empty($dataFile['bitrix']['result']['result']['find']['ID']) ? $dataFile['bitrix']['result']['result']['find']['ID'] : null;
                                    if ($userMod->update() !== false){
                                        $rsp = ['status' => 'success'];
                                    } else $rsp = ['status' => 'error', 'message' => 'Ошибка сохранения данных'];
                                } else $rsp = ['status' => 'error', 'message' => 'Ошибка сохранения данных'];
                            } else $rsp = ['status' => 'error', $model->errors];
                        } else $rsp = ['status' => 'error', 'message' => 'Пароль не может быть меньше 8 символов'];
                    } else $rsp = ['status' => 'error', 'message' => 'Пароли должны совпадать'];
                } else $rsp = ['status' => 'error', 'message' => 'Такая почта уже существует'];
            } else $rsp = ['status' => 'error', 'message' => 'Не заполнены все обязательные поля'];
        } else $rsp = ['status' => 'error', 'message' => 'Нет данных'];
        return $rsp;
    }

    public function actionRestorePass()
    {
        Yii::$app->response->format = Response::FORMAT_JSON;
        if (!empty($_POST)) {
            $post = $_POST;
            if (!empty($post['phone'])) {
                $phone = preg_replace('/[^\d]+/', '', Html::encode($_POST['phone']));
                $phone[0] = 7;
                $model = User::find()->where(['username' => $phone])->one();
                if (!empty($model)) {
                    if (!empty($_POST['new']) && !empty($_POST['conf'])) {
                        if ($_POST['new'] === $_POST['conf']) {
                            if (strlen($_POST['new']) >= 8) {
                                $model->password_hash = Yii::$app->security->generatePasswordHash($_POST['new']);
                                if ($model->validate()) {
                                    if ($model->update() !== false) {
                                        return ['status' => 'success'];
                                    } else $rsp = ['status' => 'error', 'message' => 'Ошибка сохранения данных'];
                                } else $rsp = ['status' => 'error', 'message' => $model->errors];
                            } else $rsp = ['status' => 'error', 'message' => 'Пароль не может быть меньше 8 символов'];
                        } else $rsp = ['status' => 'error', 'message' => 'Пароли должны совпадать'];
                    } else $rsp = ['status' => 'error', 'message' => 'Заполните все поля'];
                } else $rsp = ['status' => 'error', 'message' => 'Пользователь не найден'];
            } else $rsp = ['status' => 'error', 'message' => 'Не указан телефон'];
        } else $rsp = ['status' => 'error', 'message' => 'Нет данных'];
        return $rsp;
    }

    /**
     * Logs in a user.
     *
     * @return mixed
     */
    public function actionLogin()
    {
        if (!Yii::$app->user->isGuest) {
            return $this->goHome();
        }

        $model = new LoginForm();
        if ($model->load(Yii::$app->request->post())) {
            $model->username = preg_replace('/[^\d]+/', '', $model->username);
            $model->username[0] = 7;
            if ($model->login()) {
                return Yii::$app->response->redirect('cabinet');
            } else {
                $model->password = '';
                return $this->render('login', [
                    'model' => $model,
                ]);
            }
        } else {
            $model->password = '';
            return $this->render('login', [
                'model' => $model,
            ]);
        }
    }

    /**
     * Logs out the current user.
     *
     * @return mixed
     */
    public function actionLogout()
    {
        Yii::$app->user->logout();

        return $this->goHome();
    }

    /**
     * Signs user up.
     *
     * @return mixed
     */
    public function actionSignup()
    {
        $model = new SignupForm();
        if ($model->load(Yii::$app->request->post()) && $model->signup()) {
            Yii::$app->session->setFlash('success', 'Thank you for registration. Please check your inbox for verification email.');
            return $this->goHome();
        }

        return $this->render('signup', [
            'model' => $model,
        ]);
    }

    /**
     * Requests password reset.
     *
     * @return mixed
     */
    public function actionRequestPasswordReset()
    {
        $model = new PasswordResetRequestForm();
        if ($model->load(Yii::$app->request->post()) && $model->validate()) {
            if ($model->sendEmail()) {
                Yii::$app->session->setFlash('success', 'Check your email for further instructions.');

                return $this->goHome();
            } else {
                Yii::$app->session->setFlash('error', 'Sorry, we are unable to reset password for the provided email address.');
            }
        }

        return $this->render('requestPasswordResetToken', [
            'model' => $model,
        ]);
    }

    /**
     * Resets password.
     *
     * @param string $token
     * @return mixed
     * @throws BadRequestHttpException
     */
    public function actionResetPassword($token)
    {
        try {
            $model = new ResetPasswordForm($token);
        } catch (InvalidArgumentException $e) {
            throw new BadRequestHttpException($e->getMessage());
        }

        if ($model->load(Yii::$app->request->post()) && $model->validate() && $model->resetPassword()) {
            Yii::$app->session->setFlash('success', 'New password saved.');

            return $this->goHome();
        }

        return $this->render('resetPassword', [
            'model' => $model,
        ]);
    }

    /**
     * Verify email address
     *
     * @param string $token
     * @return yii\web\Response
     * @throws BadRequestHttpException
     */
    public function actionVerifyEmail($token)
    {
        try {
            $model = new VerifyEmailForm($token);
        } catch (InvalidArgumentException $e) {
            throw new BadRequestHttpException($e->getMessage());
        }
        if ($user = $model->verifyEmail()) {
            if (Yii::$app->user->login($user)) {
                Yii::$app->session->setFlash('success', 'Your email has been confirmed!');
                return $this->goHome();
            }
        }

        Yii::$app->session->setFlash('error', 'Sorry, we are unable to verify your account with provided token.');
        return $this->goHome();
    }

    /*Главная*/
    public function actionIndex()
    {
        $this->view->registerMetaTag(['name' => 'keywords', 'content' => 'Списать долг, бфл, банкротство']);
        $this->view->registerMetaTag(['name' => 'description', 'content' => 'Получите подробный план списания ваших долгов прямо сейчас!']);
        $this->view->registerMetaTag(['property' => 'og:title', 'content' => '']);
        $this->view->registerMetaTag(['property' => 'og:image', 'content' => '']);
        $this->view->registerMetaTag(['property' => 'og:url', 'content' => '']);
        $this->view->registerMetaTag(['property' => 'og:description', 'content' => '']);
        $services = Services::find()->orderBy(['date' => SORT_DESC])->limit(2)->asArray()->all();
        $reviews = Reviews::find()->orderBy('id desc')->limit(3)->asArray()->all();
        return $this->render('index', ['services' => $services, 'reviews' => $reviews]);
    }

    /*О нас*/
    public function actionAbout()
    {
        $this->view->registerMetaTag(['name' => 'keywords', 'content' => 'о компании правозащитник, Илья Дерунов, «ПРАВОЗАЩИТНИК»']);
        $this->view->registerMetaTag(['name' => 'description', 'content' => '“ПРАВОЗАЩИТНИК” - команда профессионалов своего дела, опытных юристов и Арбитражных управляющих. Мы работаем как дистанционно, так и в формате встреч в офисе. Вам не нужно тратить время на дорогу, просто оставьте заявку на сайте и мы начнем процедуру уже сегодня']);
        $this->view->registerMetaTag(['property' => 'og:title', 'content' => '']);
        $this->view->registerMetaTag(['property' => 'og:image', 'content' => '']);
        $this->view->registerMetaTag(['property' => 'og:url', 'content' => '']);
        $this->view->registerMetaTag(['property' => 'og:description', 'content' => '']);
        $articles = Articles::find()->limit(6)->orderBy('id desc')->asArray()->all();
        return $this->render('about', ['articles' => $articles]);
    }

    /*Заявка с главной*/
    public function actionMainorder()
    {
        $this->view->registerMetaTag(['name' => 'keywords', 'content' => 'Консультация по списанию долгов, списать долги, бфл']);
        $this->view->registerMetaTag(['name' => 'description', 'content' => 'Получить консультацию']);
        $this->view->registerMetaTag(['property' => 'og:title', 'content' => '']);
        $this->view->registerMetaTag(['property' => 'og:image', 'content' => '']);
        $this->view->registerMetaTag(['property' => 'og:url', 'content' => '']);
        $this->view->registerMetaTag(['property' => 'og:description', 'content' => '']);
        return $this->render('mainorder');
    }

    /*Заявка 1*/
    public function actionFirstorder()
    {
        $this->view->registerMetaTag(['name' => 'keywords', 'content' => 'Консультация по списанию долгов, списать долги, бфл']);
        $this->view->registerMetaTag(['name' => 'description', 'content' => 'Получить консультацию']);
        $this->view->registerMetaTag(['property' => 'og:title', 'content' => '']);
        $this->view->registerMetaTag(['property' => 'og:image', 'content' => '']);
        $this->view->registerMetaTag(['property' => 'og:url', 'content' => '']);
        $this->view->registerMetaTag(['property' => 'og:description', 'content' => '']);
        return $this->render('firstorder');
    }

    /*Заявка 2*/
    public function actionSecondorder()
    {
        $this->view->registerMetaTag(['name' => 'keywords', 'content' => 'Консультация по списанию долгов, списать долги, бфл, узнать о внесудебном банкротстве']);
        $this->view->registerMetaTag(['name' => 'description', 'content' => 'Узнать больше о внесудебном банкротстве']);
        $this->view->registerMetaTag(['property' => 'og:title', 'content' => '']);
        $this->view->registerMetaTag(['property' => 'og:image', 'content' => '']);
        $this->view->registerMetaTag(['property' => 'og:url', 'content' => '']);
        $this->view->registerMetaTag(['property' => 'og:description', 'content' => '']);
        return $this->render('secondorder');
    }

    /*Заявка 3*/
    public function actionTherdorder()
    {
        $this->view->registerMetaTag(['name' => 'keywords', 'content' => 'Консультация по списанию долгов, списать долги, бфл, узнать о внесудебном банкротстве']);
        $this->view->registerMetaTag(['name' => 'description', 'content' => 'Заказыть услугу']);
        $this->view->registerMetaTag(['property' => 'og:title', 'content' => '']);
        $this->view->registerMetaTag(['property' => 'og:image', 'content' => '']);
        $this->view->registerMetaTag(['property' => 'og:url', 'content' => '']);
        $this->view->registerMetaTag(['property' => 'og:description', 'content' => '']);
        return $this->render('therdorder');
    }

    /*Консультация*/
    public function actionConsultation()
    {
        $this->view->registerMetaTag(['name' => 'keywords', 'content' => 'Консультация по списанию долгов, списать долги, бфл, узнать о внесудебном банкротстве']);
        $this->view->registerMetaTag(['name' => 'description', 'content' => 'Получить консультацию']);
        $this->view->registerMetaTag(['property' => 'og:title', 'content' => '']);
        $this->view->registerMetaTag(['property' => 'og:image', 'content' => '']);
        $this->view->registerMetaTag(['property' => 'og:url', 'content' => '']);
        $this->view->registerMetaTag(['property' => 'og:description', 'content' => '']);
        return $this->render('consultation');
    }

    /*Спасибо*/
    public function actionThanks()
    {
        $this->view->registerMetaTag(['name' => 'keywords', 'content' => 'Консультация по списанию долгов, списать долги, бфл, узнать о внесудебном банкротстве']);
        $this->view->registerMetaTag(['name' => 'description', 'content' => 'Благодарим за заявку!']);
        $this->view->registerMetaTag(['property' => 'og:title', 'content' => '']);
        $this->view->registerMetaTag(['property' => 'og:image', 'content' => '']);
        $this->view->registerMetaTag(['property' => 'og:url', 'content' => '']);
        $this->view->registerMetaTag(['property' => 'og:description', 'content' => '']);
        return $this->render('thanks');
    }

    /*Квиз*/
    public function actionQuiz()
    {
        $this->view->registerMetaTag(['name' => 'keywords', 'content' => 'Консультация по списанию долгов, списать долги, бфл']);
        $this->view->registerMetaTag(['name' => 'description', 'content' => 'Пройдите не большой тест, и узнайте о возможности списать ваши долги']);
        $this->view->registerMetaTag(['property' => 'og:title', 'content' => '']);
        $this->view->registerMetaTag(['property' => 'og:image', 'content' => '']);
        $this->view->registerMetaTag(['property' => 'og:url', 'content' => '']);
        $this->view->registerMetaTag(['property' => 'og:description', 'content' => '']);
        return $this->render('quiz');
    }

    /*Контакты*/
    public function actionContacts()
    {
        $this->view->registerMetaTag(['name' => 'keywords', 'content' => 'контакты «ПРАВОЗАЩИТНИК», «ПРАВОЗАЩИТНИК», правозащитник']);
        $this->view->registerMetaTag(['name' => 'description', 'content' => 'Наши контакты']);
        $this->view->registerMetaTag(['property' => 'og:title', 'content' => '']);
        $this->view->registerMetaTag(['property' => 'og:image', 'content' => '']);
        $this->view->registerMetaTag(['property' => 'og:url', 'content' => '']);
        $this->view->registerMetaTag(['property' => 'og:description', 'content' => '']);
        $articles = Articles::find()->limit(6)->orderBy('id desc')->asArray()->all();
        return $this->render('contacts', ['articles' => $articles]);
    }

    /*Услуги*/
    public function actionServices()
    {
        $this->view->registerMetaTag(['name' => 'keywords', 'content' => 'подобрать план списания долгов, списать долги, избавиться от коллекторов']);
        $this->view->registerMetaTag(['name' => 'description', 'content' => 'Услуги юридической службы «ПРАВОЗАЩИТНИК», узнайте больше о предоставляемых нами услугах']);
        $this->view->registerMetaTag(['property' => 'og:title', 'content' => '']);
        $this->view->registerMetaTag(['property' => 'og:image', 'content' => '']);
        $this->view->registerMetaTag(['property' => 'og:url', 'content' => '']);
        $this->view->registerMetaTag(['property' => 'og:description', 'content' => '']);
        $articles = Articles::find()->limit(6)->orderBy('id desc')->asArray()->all();
        $query = Services::find()->orderBy('id')->asArray();
        $pages = new Pagination(['totalCount' => $query->count(), 'pageSize' => 4]);
        $posts = $query->offset($pages->offset)
            ->limit($pages->limit)
            ->all();
        return $this->render('services', ['articles' => $articles, 'services' => $posts, 'pages' => $pages]);
    }

    /*Новости*/
    public function actionNews()
    {
        $news = Articles::find()->orderBy('id')->asArray()->limit(6)->all();
        $category = Articles::find()->select('category')->distinct()->asArray()->all();
        $query = Articles::find()->orderBy('id desc');
        $pages = new Pagination(['totalCount' => $query->count(), 'pageSize' => 7]);
        $posts = $query->offset($pages->offset)
            ->limit($pages->limit)
            ->all();
        $this->view->registerMetaTag(['name' => 'keywords', 'content' => 'новости о банкротстве, последние новости о банкротстве']);
        $this->view->registerMetaTag(['name' => 'description', 'content' => 'Статьи по списанию кредитов и долгов']);
        $this->view->registerMetaTag(['property' => 'og:title', 'content' => '']);
        $this->view->registerMetaTag(['property' => 'og:image', 'content' => '']);
        $this->view->registerMetaTag(['property' => 'og:url', 'content' => '']);
        $this->view->registerMetaTag(['property' => 'og:description', 'content' => '']);
        return $this->render('news', [
            'news' => $news,
            'articles' => $posts,
            'category' => $category,
            'pages' => $pages,
        ]);
    }

    /*Статья*/
    public function actionArticle($link)
    {
        if (!empty($link)) {
            $article = Articles::find()->where(['link' => $link])->one();
            $moreArticle = Articles::find()->limit(6)->where(['!=', 'id', $article['id']])->asArray()->all();
            $themeArticle = Articles::find()->limit(4)->where(['category' => $article['category']])->asArray()->all();
            if (!empty($article)) {
                $id = $article->id;
                if (!empty($_COOKIE['Views'])) {
                    $cookie = $_COOKIE['Views'];
                    $array = json_decode($cookie, true);
                    if (!in_array($id, $array)) {
                        $array[] = $id;
                        $cookie = json_encode($array, JSON_UNESCAPED_UNICODE);
                        setcookie('Views', $cookie, time() + 3600 * 24 * 365 * 10, '/');
                        $article->views = $article->views + 1;
                        $article->update();
                    }
                } else {
                    $cookLink = json_encode([$id], JSON_UNESCAPED_UNICODE);
                    setcookie('Views', $cookLink, time() + 3600 * 24 * 365 * 10, '/');
                    $article->views = $article->views + 1;
                    $article->update();
                }
                $this->view->registerMetaTag(['name' => 'keywords', 'content' => $article['keywords']]);
                $this->view->registerMetaTag(['name' => 'description', 'content' => $article['meta_desc']]);
                $this->view->registerMetaTag(['property' => 'og:title', 'content' => '']);
                $this->view->registerMetaTag(['property' => 'og:type', 'content' => 'article']);
                $this->view->registerMetaTag(['property' => 'og:image', 'content' => '']);
                $this->view->registerMetaTag(['property' => 'og:url', 'content' => '']);
                $this->view->registerMetaTag(['property' => 'og:description', 'content' => '']);
            } else return $this->redirect(Url::to(['news']));
        } else return $this->redirect(Url::to(['news']));


        return $this->render('article', [
            'article' => $article,
            'moreArticle' => $moreArticle,
            'themeArticle' => $themeArticle,
        ]);
    }

    public function actionLike(Request $request)
    {
        Yii::$app->response->format = Response::FORMAT_JSON;

        $id = $request->post('id');
        if (!empty($id)) {
            $article = Articles::findOne(['id' => $id]);
            if (!empty($article)) {
                if (empty($_COOKIE['like'])) {
                    $article->likes += 1;
                    $article->update();
                    setcookie('like', $id, time() + 3600 * 24 * 365 * 10, '/');
                    $rsp = ['status' => 'success', 'message' => 'Лайк поставлен'];
                } else $rsp = ['status' => 'error', 'message' => 'Лайк уже поставлен'];
            } else $rsp = ['status' => 'error', 'message' => 'Нет данных'];
        } else $rsp = ['status' => 'error', 'message' => 'Нет данных'];
        return $rsp;
    }

    public function actionDislike(Request $request)
    {
        Yii::$app->response->format = Response::FORMAT_JSON;

        $dislike = $request->post('like');
        $id = $request->post('id');
        if (!empty($dislike) && !empty($id)) {
            $article = Articles::findOne(['id' => $id]);
            if (!empty($article)) {
                if (empty($_COOKIE['diz'])) {
                    $article->dizlike += $dislike;
                    $article->update();
                    setcookie('diz', $id, time() + 3600 * 24 * 365 * 10, '/');
                    $rsp = ['status' => 'success', 'message' => 'Лайк поставлен'];
                } else $rsp = ['status' => 'error', 'message' => 'Лайк уже поставлен'];
            } else $rsp = ['status' => 'error', 'message' => 'Нет данных'];
        } else $rsp = ['status' => 'error', 'message' => 'Нет данных'];
        return $rsp;
    }

    /*Поиск*/
    public function actionSearch($cat = null, $search = null)
    {
        $filter = ['AND'];
        if (!empty($_GET['cat'])) {
            $filter[] = ['=', 'category', $_GET['cat']];
        }
        if (!empty($_GET['search'])) {
            $filter[] = ['OR',
                ['like', 'title', '%' . $_GET['search'] . '%', false],
                ['like', 'sub_title', '%' . $_GET['search'] . '%', false],
                ['like', 'content', '%' . $_GET['search'] . '%', false],
            ];
        }
        $news = Articles::find()->orderBy('id')->asArray()->limit(6)->all();
        $category = Articles::find()->select('category')->distinct()->asArray()->all();
        $query = Articles::find()->orderBy('id desc')->where($filter);
        $pages = new Pagination(['totalCount' => $query->count(), 'pageSize' => 7]);
        $posts = $query->offset($pages->offset)
            ->limit($pages->limit)
            ->where($filter)
            ->all();
        $this->view->registerMetaTag(['name' => 'keywords', 'content' => 'Статьи о банкротстве, бфл, новости о банкротстве']);
        $this->view->registerMetaTag(['name' => 'description', 'content' => 'Найдите больше статей о банкротстве физических лиц']);
        $this->view->registerMetaTag(['property' => 'og:title', 'content' => '']);
        $this->view->registerMetaTag(['property' => 'og:image', 'content' => '']);
        $this->view->registerMetaTag(['property' => 'og:url', 'content' => '']);
        $this->view->registerMetaTag(['property' => 'og:description', 'content' => '']);
        return $this->render('search', [
            'news' => $news,
            'articles' => $posts,
            'category' => $category,
            'pages' => $pages,
        ]);
    }

    /*Отзывы*/
    public function actionReviews()
    {
        $article = Articles::find()->asArray()->orderBy('id desc')->limit(6)->all();
        $query = Reviews::find()->asArray()->orderBy('id desc');
        $pages = new Pagination(['totalCount' => $query->count(), 'pageSize' => 4]);
        $posts = $query->offset($pages->offset)
            ->limit($pages->limit)
            ->all();
        $this->view->registerMetaTag(['name' => 'keywords', 'content' => 'отзывы о юридической службе правозащитник, правозащитник, отзывы о компании,']);
        $this->view->registerMetaTag(['name' => 'description', 'content' => 'Посмотрите отзывы от наших клиентов']);
        $this->view->registerMetaTag(['property' => 'og:title', 'content' => '']);
        $this->view->registerMetaTag(['property' => 'og:image', 'content' => '']);
        $this->view->registerMetaTag(['property' => 'og:url', 'content' => '']);
        $this->view->registerMetaTag(['property' => 'og:description', 'content' => '']);

        return $this->render('reviews', [
            'reviews' => $posts,
            'article' => $article,
            'pages' => $pages,
        ]);
    }

    public function actionPrivacypolicy()
    {
        return $this->render('privacypolicy');
    }

    public function actionComplited()
    {
        $this->view->registerMetaTag(['name' => 'keywords', 'content' => 'завершенные дела юридической службы правозащитник, правозащитник, завершенные дела компании,']);
        $this->view->registerMetaTag(['name' => 'description', 'content' => 'Посмотрите завершенные дела наших клиентов']);
        $this->view->registerMetaTag(['property' => 'og:title', 'content' => 'Завершенные дела наших клиентов']);
        $this->view->registerMetaTag(['property' => 'og:image', 'content' => '']);
        $this->view->registerMetaTag(['property' => 'og:url', 'content' => 'https://uspravozashitnik.ru/completed']);
        $this->view->registerMetaTag(['property' => 'og:description', 'content' => 'Посмотрите завершенные дела наших клиентов']);
        $article = Articles::find()->asArray()->orderBy('id desc')->limit(6)->all();
        $completed = Completed::find()->orderBy('id desc')->asArray();
        $pages = new Pagination(['totalCount' => $completed->count(), 'pageSize' => 9]);
        $posts = $completed->offset($pages->offset)
            ->limit($pages->limit)
            ->all();
        return $this->render('complited', [
            'completed' => $posts,
            'pages' => $pages,
            'article' => $article,
        ]);
    }

    /*Оплата*/
    public function actionPayment()
    {
        $this->view->registerMetaTag(['name' => 'keywords', 'content' => 'Оплата услуг правозащитник, тарифы правозащитник']);
        $this->view->registerMetaTag(['name' => 'description', 'content' => 'Выберите удобный для вас способ оплаты и начните жизнь с чистого листа']);
        $this->view->registerMetaTag(['property' => 'og:title', 'content' => '']);
        $this->view->registerMetaTag(['property' => 'og:image', 'content' => '']);
        $this->view->registerMetaTag(['property' => 'og:url', 'content' => '']);
        $this->view->registerMetaTag(['property' => 'og:description', 'content' => '']);

        $tariff = Tariff::find()->asArray()->all();

        return $this->render('payment', ['tariff' => $tariff]);
    }

    /*Регистрация*/
    public function actionSignin()
    {
        $this->view->registerMetaTag(['name' => 'keywords', 'content' => 'регистрация в личном кабинете правозащитник']);
        $this->view->registerMetaTag(['name' => 'description', 'content' => 'Укажите ваши данные для регистрации на сайте']);
        $this->view->registerMetaTag(['property' => 'og:title', 'content' => '']);
        $this->view->registerMetaTag(['property' => 'og:image', 'content' => '']);
        $this->view->registerMetaTag(['property' => 'og:url', 'content' => '']);
        $this->view->registerMetaTag(['property' => 'og:description', 'content' => '']);
        return $this->render('signin');
    }

    public function actionChooseTariff()
    {
        Yii::$app->response->format = Response::FORMAT_JSON;
        if (empty($_POST['id']))
            return ['status' => 'error'];
        else {
            $user = User::findOne(Yii::$app->getUser()->getId());
            $tariff = Tariff::findOne($_POST['id']);
            if (!empty($user) && !empty($tariff) && empty($user->tariff_id)) {
                $user->tariff_id = $_POST['id'];
                $user->email = !empty($user->email) ? $user->email : "Почта пользователя {$user->username} не указана";
                $user->validate();
                if ($user->update() !== false)
                    return ['status' => 'success'];
                else
                    return ['status' => "error", $user->errors];
            } else
                return ['status' => 'error'];
        }
    }

    public function actionSendForm()
    {
        Yii::$app->response->format = Response::FORMAT_JSON;
//        if (!empty($_POST)) {
//            foreach ($_POST as $k => $item) $post[$k] = $item;
//            $com = "";
//            $com .= !empty($post['overdue']) ? "Есть ли у вас на данный момент просрочки по кредитам?: {$post['overdue']} <br>" : '';
//            $com .= !empty($post['property']) ? "Есть ли у вас имущество в собственности?: {$post['property']} <br>" : '';
//            $com .= !empty($post['summ']) ? "Укажите общую сумму ваших долгов?: {$post['summ']} <br>" : '';
//            $array = array(
//                'COMMENTS' => $com,
//                'TITLE' => !empty($_POST['fio']) ? $_POST['fio'] : 'Заявка с uspravozashitnik',
//                'NAME' => !empty($_POST['fio']) ? $_POST['fio'] : '',
//                'SOURCE_ID' => 26,
//                'OPENED' => 'Y',
//                'ASSIGNED_BY_ID' => 1,
//                'PHONE' => array(array('VALUE' => $_POST['phone'], 'VALUE_TYPE' => 'WORK')),
//            );
//            $queryData = http_build_query(array(
//                'fields' => $array,
//                'params' => array('REGISTER_SONET_EVENT' => 'Y')
//            ));
//            $queryUrl = 'https://pravozashitnik.bitrix24.ru/rest/1/uuk0292ywe7hgsz1/crm.lead.add';
//            $curl = curl_init();
//            curl_setopt_array($curl, array(
//                CURLOPT_SSL_VERIFYPEER => 0,
//                CURLOPT_POST => 1,
//                CURLOPT_HEADER => 0,
//                CURLOPT_RETURNTRANSFER => 1,
//                CURLOPT_URL => $queryUrl,
//                CURLOPT_POSTFIELDS => $queryData,
//            ));
//            $output = curl_exec($curl);
//            curl_close($curl);
//        } else $rsp = ['status' => 'error', 'message' => 'Нет данных'];
//        return $rsp;
    if (!empty($_POST)){
        foreach ($_POST as $k => $item) $post[$k] = $item;
        $com = "";
        $com .= !empty($post['overdue']) ? "Есть ли у вас на данный момент просрочки по кредитам?: {$post['overdue']} <br>" : '';
        $com .= !empty($post['property']) ? "Есть ли у вас имущество в собственности?: {$post['property']} <br>" : '';
        $com .= !empty($post['summ']) ? "Укажите общую сумму ваших долгов?: {$post['summ']} <br>" : '';
        $params = ['sum' => (int)$_POST['summ']]; #пример для долгов
        $utm = [];
        if (!empty($_POST['query_string']))
            parse_str($_POST['query_string'], $utm); # вариант получения UTM меток, если в input name=query_string был записан $_SERVER['QUERY_STRING']
        $lead_data = [
            #обязательные
            'type' => 'dolgi', # тип лидов, берем отсюда https://admin.myforce.ru/lead-force/leads-category
            'phone' => $_POST['phone'],
            'ip' => $_SERVER['REMOTE_ADDR'], # либо указать регион
            'source' => 'uspravozashitnik.ru', # берем отсюда https://admin.myforce.ru/lead-force/sources/index либо добавляем туда, если нет нужного
            'access_token' => '1fec131a-c2b6-ff12-b598-3225432bd8c1', # всегда такой же
            #необязательные
            'name' => $_POST['fio'] ?? null, # сюда фио
            'email' => $_POST['email'] ?? null, # сюда почта
            'comments' => $com, # комменты
            'params' => json_encode($params, JSON_UNESCAPED_UNICODE), # параметры лидов можно узнать здесь https://admin.myforce.ru/lead-force/leads-params
            'utm_source' => $utm['utm_source'] ?? null,
            'utm_campaign' => $utm['utm_campaign'] ?? null,
            'utm_medium' => $utm['utm_medium'] ?? null,
            'utm_content' => $utm['utm_content'] ?? null,
            'utm_term' => $utm['utm_term'] ?? null,
            'utm_title' => $utm['utm_title'] ?? null,
            'utm_device_type' => $utm['utm_device_type'] ?? null,
            'utm_age' => $utm['utm_age'] ?? null,
            'utm_inst' => $utm['utm_inst'] ?? null,
            'utm_special' => $utm['utm_special'] ?? null
        ];
        $ch = curl_init();
        curl_setopt_array($ch, [
            CURLOPT_URL => 'https://api.myforce.ru/lead.add',
            CURLOPT_POST => true,
            CURLOPT_POSTFIELDS => http_build_query($lead_data),
            CURLOPT_TIMEOUT => 10,
            CURLOPT_CONNECTTIMEOUT => 10,
            CURLOPT_RETURNTRANSFER => true
        ]);
        $response = curl_exec($ch); # в $response будет лежать ответ сервера в формате json
        if (!$response) # если ошибка cURL
            $response = json_encode(['type' => 'error', 'code' => 'curl', 'message' => curl_error($ch)], JSON_UNESCAPED_UNICODE);
        curl_close($ch);
        die($response); # если нужно посмотреть что там
    } else $rsp = ['status' => 'error', 'message' => 'Нет данных'];
        return $rsp;
    }

    public function actionBitrixApp()
    {
        if (!empty($_GET['id'])) {
            $id = $_GET['id'];
            $result = CRest::call('crm.deal.get?id=' . $id);
            echo json_encode($result);
        }
        if (!empty($_GET['auth'])) {
            $result = CRest::GetNewAuth(['this_auth' => 'Y']);
            echo json_encode($result);
        }
        die();
    }

    public function actionBitrixAppInstall()
    {
        $result = CRest::installApp();
        die(print_r($result));
    }

    public function actionCheckServer()
    {
        $arr = CRest::checkServer();
        die(print_r($arr));
    }


    public function actionGetNewPayments()
    {
        $code = 'k5490dfm';
        $required = ['deal', 'payment', 'sum', 'date', 'link', 'code'];
        if (!empty($_GET)) {
            foreach ($required as $key => $item) {
                if (empty($_GET[$item]))
                    die();
            }
            if ($code === $_GET['code']) {
                $user = UserModel::findOne(['deal_id' => $_GET['deal']]);
                if (!empty($user)) {
                    $payment = new UserPayments();
                    $payment->user_id = $user->id;
                    $payment->expected_val = round((float)$_GET['sum'], 0);
                    $payment->val = 0;
                    $payment->status = 0;
                    $payment->link_payment = $_GET['link'];
                    $payment->date_exp = date("Y-m-d 12:00:00", strtotime($_GET['date']));
                    $payment->bitrix_pay_id = $_GET['payment'];
                    $payment->save();
                }
            }
        }
    }

    public function actionConfirmPayment()
    {
        $code = '9erxj3feg';
        $required = ['deal', 'payment', 'code'];
        if (!empty($_GET)) {
            foreach ($required as $key => $item) {
                if (empty($_GET[$item]))
                    die();
            }
            if ($code === $_GET['code']) {
                $user = UserModel::findOne(['deal_id' => $_GET['deal']]);
                if (!empty($user)) {
                    $payment = UserPayments::findOne(['bitrix_pay_id' => $_GET['payment'], 'user_id' => $user->id]);
                    if (!empty($payment)) {
                        $payment->val = $payment->expected_val;
                        $payment->status = 1;
                        $payment->update();
                    }
                }
            }
        }
    }

    public function actionKnowledgeBase()
    {

        $video = KnowledgeBase::find()->asArray();
        $news = Articles::find()->asArray()->limit(6)->all();
        $pages = new Pagination(['totalCount' => $video->count(), 'pageSize' => 6]);
        $posts = $video->offset($pages->offset)
            ->limit($pages->limit)
            ->all();

        return $this->render('knowledge-base', [
            'video' => $posts,
            'pages' => $pages,
            'news' => $news,
        ]);
    }

    public function actionAutoreg()
    {
        $get = $_GET;
        $phone = preg_replace('/[^\d]+/', '', Html::encode($get['phone']));
        $phone[0] = 7;
        $user = \common\models\User::find()->where(['username' => $phone])->asArray()->one();
        if (!empty($user)){
            return $this->redirect('login');
        }
        $model = new \common\models\User();
        $model->username = $phone;
        $model->deal_id = 0;
        $model->email = !empty($get['email']) ? $get['email'] : "{$phone}default@mail.ru";
        $model->region = !empty($get['region']) ? $get['region'] : 'Регион не задан';
        $model->fio = $get['fio'];
        $model->setPassword('12345678');
        $model->generateAuthKey();
        $model->generateEmailVerificationToken();
        if ($model->validate()) {
            if ($model->save()) {
                $session = Yii::$app->session;
                $session->open();
                $_SESSION['phone'] = $phone;
                $_SESSION['password'] = '12345678';
                $_SESSION['valid_user'] = true;
                $dataFile = Bitrix::new__contact__signup($model->fio, $model->username);
                if (is_string($dataFile))
                    @file_put_contents('test_bitrix.log', $dataFile . PHP_EOL, FILE_APPEND);
                $userMod = User::findOne(['username' => $phone]);
                $userMod->contact_id = $dataFile['bitrix']['result']['result']['find']['ID'];
                if ($userMod->update() !== false){
                    $rsp = ['status' => 'success'];
                } else $rsp = ['status' => 'error', 'message' => 'Ошибка сохранения данных'];
            } else return $this->redirect('login');
        } else return $this->redirect('login');
        return $this->redirect('login');
    }

    public function actionGetDealId()
    {
        Yii::$app->response->format = Response::FORMAT_JSON;
        $user = User::find()->where(['username' => $_GET['phone']])->one();
        if (!empty($user)){
            $user->deal_id = $_GET['deal_id'];
            $user->update();
            return true;
        } else return false;
    }

    public function actionPaymentNew()
    {
        Yii::$app->response->format = Response::FORMAT_JSON;
        if (empty($_POST['summ'] || empty($_POST['user']))) return $this->redirect('payment');
        $user = UserModel::findOne(['id' => $_POST['user']]);
        $model = new UserPayments();
        $model->user_id = $_POST['user'];
        $model->date_create = date('Y-m-d H:i:s');
        $model->date_exp = date('Y-m-d H:i:s');
        $model->expected_val = $_POST['summ'];
        $model->val = $_POST['summ'];
        $model->status = 1;
        $model->bitrix_pay_id = $user->contact_id;
        $model->link_payment = "https://securepay.tinkoff.ru/new";
        if ($model->save()) return true;
        else return false;
    }

}